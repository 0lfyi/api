generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = uuidOssp(map: "uuid-ossp")
}

model Version {
  version                 BigInt
  accumulatorRootHash     Bytes
  timestamp               BigInt
  chainId                 Int
  scriptHashAllowList     Bytes[]
  modulePublishingAllowed Boolean?
  diemVersion             BigInt?
  dualAttestationLimit    BigInt?

  @@unique([version, accumulatorRootHash, chainId, timestamp])
  @@index([version])
  @@index([timestamp])
}

model Currency {
  code                        String @id
  fractionalPart              BigInt
  scalingFactor               BigInt
  mintEventsKey               String
  burnEventsKey               String
  preburnEventsKey            String
  cancelBurnEventsKey         String
  exchangeRateUpdateEventsKey String
}

enum VMStatus {
  Executed
  OutOfGas
  MoveAbort
  ExecutionFailure
  MiscellaneousError
  VerificationError
  DeserializationError
  PublishingFailure
  Unknown
}

enum TransactionType {
  BlockMetadata
  User
  WriteSet
  Unknown
}

model Transaction {
  hash     Bytes           @id
  version  BigInt
  bytes    Bytes
  gasUsed  BigInt
  vmStatus VMStatus
  type     TransactionType

  @@index([version])
}

model UserTransaction {
  hash                      Bytes   @id
  sender                    Bytes
  signatureScheme           String
  signature                 Bytes
  publicKey                 Bytes
  secondarySigners          Bytes[]
  secondarySignatureSchemes Bytes[]
  secondarySignatures       Bytes[]
  secondaryPublicKeys       Bytes[]
  sequenceNumber            BigInt
  chainId                   Int
  maxGasAmount              BigInt
  gasUnitPrice              BigInt
  gasCurrency               String
  expirationTimestampSecs   BigInt
  scriptHash                Bytes
  scriptBytes               Bytes
  script                    Json
}

model BlockMetadataTransaction {
  hash           Bytes  @id
  timestampUsecs BigInt
}

enum EventType {
  Burn
  CancelBurn
  Mint
  ToXDXExchangeRateUpdate
  Preburn
  ReceivedPayment
  SentPayment
  AdminTransaction
  NewEpoch
  NewBlock
  ReceivedMint
  ComplianceKeyRotation
  BaseUrlRotation
  CreateAccount
  DiemIdDomain
  Unknown
}

model Event {
  transactionHash Bytes
  key             Bytes
  sequenceNumber  BigInt
  type            EventType

  @@unique([transactionHash, sequenceNumber])
}

model NewBlockEvent {
  transactionHash Bytes
  sequenceNumber  BigInt
  round           BigInt
  proposer        Bytes
  proposedTime    BigInt

  @@unique([transactionHash, sequenceNumber])
}

model SentPaymentEvent {
  transactionHash Bytes
  sequenceNumber  BigInt
  amount          BigInt
  currency        String
  receiver        Bytes
  sender          Bytes
  metadata        Bytes

  @@unique([transactionHash, sequenceNumber])
}

model ReceivedPaymentEvent {
  transactionHash Bytes
  sequenceNumber  BigInt
  amount          BigInt
  currency        String
  receiver        Bytes
  sender          Bytes
  metadata        Bytes

  @@unique([transactionHash, sequenceNumber])
}

model CreateAccountEvent {
  transactionHash Bytes
  sequenceNumber  BigInt
  createdAddress  Bytes
  roleId          BigInt

  @@unique([transactionHash, sequenceNumber])
}

model MintEvent {
  transactionHash Bytes
  sequenceNumber  BigInt
  amount          BigInt
  currency        String

  @@unique([transactionHash, sequenceNumber])
}

model BurnEvent {
  transactionHash Bytes
  sequenceNumber  BigInt
  amount          BigInt
  currency        String
  preburnAddress  Bytes

  @@unique([transactionHash, sequenceNumber])
}

model NewEpochEvent {
  transactionHash Bytes
  sequenceNumber  BigInt
  epoch           BigInt

  @@unique([transactionHash, sequenceNumber])
}

enum AccountRole {
  ChildVASP
  ParentVASP
  DesignatedDealer
  TreasuryCompliance
  Unknown
}

model Account {
  address                        Bytes       @id
  sequenceNumber                 BigInt
  authenticationKey              Bytes
  sentEventsKey                  Bytes
  receivedEventsKey              Bytes
  delegatedKeyRotationCapability Boolean
  delegatedWithdrawalCapability  Boolean
  isFrozen                       Boolean
  role                           AccountRole
  version                        BigInt
}

model Validator {
  id                String              @id @db.Uuid
  accountAddress    Bytes
  vfnIp             String              @db.Inet
  validatorIp       String              @db.Inet
  ValidatorPresence ValidatorPresence[]

  @@unique([accountAddress, vfnIp, validatorIp])
}

model ValidatorPresence {
  id                String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  validatorId       String                @db.Uuid
  vfnLocation       Unsupported("Point")?
  validatorLocation Unsupported("Point")?

  validator Validator @relation(fields: [validatorId], references: [id])

  createdAt DateTime @default(now())
}

model HistoricalGasUsage {
  gasUsed Float
  volume  Int
  date    DateTime
  type    TransactionType

  @@unique([date, type])
}

model CommunityWallet {
  address     Bytes   @id
  description String
  link        String?
}
